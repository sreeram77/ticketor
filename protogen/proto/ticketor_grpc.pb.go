// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/ticketor.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ticketor_PurchaseTicket_FullMethodName = "/Ticketor/PurchaseTicket"
	Ticketor_GetTicket_FullMethodName      = "/Ticketor/GetTicket"
	Ticketor_RemoveTicket_FullMethodName   = "/Ticketor/RemoveTicket"
	Ticketor_ModifyTicket_FullMethodName   = "/Ticketor/ModifyTicket"
	Ticketor_GetTickets_FullMethodName     = "/Ticketor/GetTickets"
)

// TicketorClient is the client API for Ticketor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketorClient interface {
	PurchaseTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*TicketReply, error)
	GetTicket(ctx context.Context, in *TicketIDRequest, opts ...grpc.CallOption) (*TicketReply, error)
	RemoveTicket(ctx context.Context, in *TicketIDRequest, opts ...grpc.CallOption) (*Empty, error)
	ModifyTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*TicketReply, error)
	GetTickets(ctx context.Context, in *SectionIDRequest, opts ...grpc.CallOption) (*TicketsReply, error)
}

type ticketorClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketorClient(cc grpc.ClientConnInterface) TicketorClient {
	return &ticketorClient{cc}
}

func (c *ticketorClient) PurchaseTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*TicketReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketReply)
	err := c.cc.Invoke(ctx, Ticketor_PurchaseTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketorClient) GetTicket(ctx context.Context, in *TicketIDRequest, opts ...grpc.CallOption) (*TicketReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketReply)
	err := c.cc.Invoke(ctx, Ticketor_GetTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketorClient) RemoveTicket(ctx context.Context, in *TicketIDRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Ticketor_RemoveTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketorClient) ModifyTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*TicketReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketReply)
	err := c.cc.Invoke(ctx, Ticketor_ModifyTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketorClient) GetTickets(ctx context.Context, in *SectionIDRequest, opts ...grpc.CallOption) (*TicketsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketsReply)
	err := c.cc.Invoke(ctx, Ticketor_GetTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketorServer is the server API for Ticketor service.
// All implementations must embed UnimplementedTicketorServer
// for forward compatibility.
type TicketorServer interface {
	PurchaseTicket(context.Context, *TicketRequest) (*TicketReply, error)
	GetTicket(context.Context, *TicketIDRequest) (*TicketReply, error)
	RemoveTicket(context.Context, *TicketIDRequest) (*Empty, error)
	ModifyTicket(context.Context, *TicketRequest) (*TicketReply, error)
	GetTickets(context.Context, *SectionIDRequest) (*TicketsReply, error)
	mustEmbedUnimplementedTicketorServer()
}

// UnimplementedTicketorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTicketorServer struct{}

func (UnimplementedTicketorServer) PurchaseTicket(context.Context, *TicketRequest) (*TicketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseTicket not implemented")
}
func (UnimplementedTicketorServer) GetTicket(context.Context, *TicketIDRequest) (*TicketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicket not implemented")
}
func (UnimplementedTicketorServer) RemoveTicket(context.Context, *TicketIDRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTicket not implemented")
}
func (UnimplementedTicketorServer) ModifyTicket(context.Context, *TicketRequest) (*TicketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyTicket not implemented")
}
func (UnimplementedTicketorServer) GetTickets(context.Context, *SectionIDRequest) (*TicketsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickets not implemented")
}
func (UnimplementedTicketorServer) mustEmbedUnimplementedTicketorServer() {}
func (UnimplementedTicketorServer) testEmbeddedByValue()                  {}

// UnsafeTicketorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketorServer will
// result in compilation errors.
type UnsafeTicketorServer interface {
	mustEmbedUnimplementedTicketorServer()
}

func RegisterTicketorServer(s grpc.ServiceRegistrar, srv TicketorServer) {
	// If the following call pancis, it indicates UnimplementedTicketorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ticketor_ServiceDesc, srv)
}

func _Ticketor_PurchaseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketorServer).PurchaseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ticketor_PurchaseTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketorServer).PurchaseTicket(ctx, req.(*TicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticketor_GetTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketorServer).GetTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ticketor_GetTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketorServer).GetTicket(ctx, req.(*TicketIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticketor_RemoveTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketorServer).RemoveTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ticketor_RemoveTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketorServer).RemoveTicket(ctx, req.(*TicketIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticketor_ModifyTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketorServer).ModifyTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ticketor_ModifyTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketorServer).ModifyTicket(ctx, req.(*TicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticketor_GetTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketorServer).GetTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ticketor_GetTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketorServer).GetTickets(ctx, req.(*SectionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ticketor_ServiceDesc is the grpc.ServiceDesc for Ticketor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ticketor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ticketor",
	HandlerType: (*TicketorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PurchaseTicket",
			Handler:    _Ticketor_PurchaseTicket_Handler,
		},
		{
			MethodName: "GetTicket",
			Handler:    _Ticketor_GetTicket_Handler,
		},
		{
			MethodName: "RemoveTicket",
			Handler:    _Ticketor_RemoveTicket_Handler,
		},
		{
			MethodName: "ModifyTicket",
			Handler:    _Ticketor_ModifyTicket_Handler,
		},
		{
			MethodName: "GetTickets",
			Handler:    _Ticketor_GetTickets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ticketor.proto",
}
